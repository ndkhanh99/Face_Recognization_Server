arguments: backend/Helper/align_dataset_mtcnn.py Dataset/FaceData/raw Dataset/FaceData/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 1.15.0
--------------------
git hash: b'9b761cccc8b24d4e4c2a98547bd0404f87597495'
--------------------
b'diff --git a/.gitignore b/.gitignore\nindex 9a6e17d..d88f111 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,3 +1,4 @@\n env/\n *.DS_Store\n-*.pyc\n\\ No newline at end of file\n+*.pyc\n+data/\n\\ No newline at end of file\ndiff --git a/backend/auth_routes.py b/backend/auth_routes.py\nindex 113787d..1ffb9b9 100644\n--- a/backend/auth_routes.py\n+++ b/backend/auth_routes.py\n@@ -32,7 +32,7 @@ def token_required(f):\n         except:\n             return (jsonify({\'message\': \'Token is invalid !!\'}),\n              401)\n-            return f(current_user, *args, **kwargs)\n+        return f(current_user, *args, **kwargs)\n \n     return decorated\n \n@@ -58,17 +58,19 @@ def login():\n     auth = request.form\n     if not (auth and auth.get(\'email\') and auth.get(\'password\')):\n         return make_response(\'Could not verify\', 401, {\'WWW-Authenticate\': \'Basic realm ="Login required !!"\'})\n-        user = User.query.filter_by(email=(auth.get(\'email\'))).first()\n-        if not user:\n-            return make_response(\'Could not verify\', 401, {\'WWW-Authenticate\': \'Basic realm ="User does not exist !!"\'})\n-        if check_password_hash(user.password, auth.get(\'password\')):\n-            token = jwt.encode({\'public_id\':user.public_id, \n-             \'student_code\':user.student_code, \n-             \'exp\':datetime.utcnow() + timedelta(minutes=120)}, key)\n-            role = jwt.encode({\'role\':user.role, \n-             \'exp\':datetime.utcnow() + timedelta(minutes=30)}, key)\n-            print(token)\n-            return make_response(jsonify({\'token\':token,  \'role\':user.role,  \'name\':user.name,  \'email\':user.email,  \'role\':user.role}), 201)\n+        \n+    user = User.query.filter_by(email=(auth.get(\'email\'))).first()\n+    if not user:\n+        return make_response(\'Could not verify\', 401, {\'WWW-Authenticate\': \'Basic realm ="User does not exist !!"\'})\n+    if check_password_hash(user.password, auth.get(\'password\')):\n+        token = jwt.encode({\'public_id\':user.public_id, \n+            \'student_code\':user.student_code, \n+            \'exp\':datetime.utcnow() + timedelta(minutes=120)}, key)\n+        role = jwt.encode({\'role\':user.role, \n+            \'exp\':datetime.utcnow() + timedelta(minutes=30)}, key)\n+        print(token)\n+        return make_response(jsonify({\'token\':token,  \'role\':user.role,  \'name\':user.name,  \'email\':user.email,  \'role\':user.role}), 201)\n+    \n     return make_response(\'Could not verify\', 403, {\'WWW-Authenticate\': \'Basic realm ="Wrong Password !!"\'})\n \n \ndiff --git a/backend/detect_routes.py b/backend/detect_routes.py\nindex ceef753..d1f714c 100644\n--- a/backend/detect_routes.py\n+++ b/backend/detect_routes.py\n@@ -6,7 +6,7 @@ import facenet.src.facenet as facenet\n import imutils\n from imutils.video import VideoStream\n import pickle\n-from Helper.align import detect_face\n+from .Helper.align import detect_face\n import numpy as np, cv2\n from .models import Role, User, userSchema, roleSchema, Subject, Attendance, Online_lesson\n from . import app\ndiff --git a/backend/stream_routes.py b/backend/stream_routes.py\nindex 40d397f..b15fb7c 100644\n--- a/backend/stream_routes.py\n+++ b/backend/stream_routes.py\n@@ -8,7 +8,7 @@ from . import db\n from . import UPLOAD_FOLDER\n from .models import Role, User, userSchema, roleSchema\n from .auth_routes import token_required\n-from Helper.camera import VideoCamera\n+from .Helper.camera import VideoCamera\n import cv2\n from . import app\n import time, threading\n@@ -58,11 +58,14 @@ def video_stream():\n     video_camera = VideoCamera()\n     while True:\n         frame = video_camera.get_frame()\n+\n         if frame != None:\n             global_frame = frame\n-            yield \'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\' + frame + \'\\r\\n\\r\\n\'\n+            yield (b\'--frame\\r\\n\'\n+                    b\'Content-Type: image/jpeg\\r\\n\\r\\n\' + frame + b\'\\r\\n\\r\\n\')\n         else:\n-            yield \'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\' + global_frame + \'\\r\\n\\r\\n\'\n+            yield (b\'--frame\\r\\n\'\n+                            b\'Content-Type: image/jpeg\\r\\n\\r\\n\' + global_frame + b\'\\r\\n\\r\\n\')\n \n \n def captureImages(key):\ndiff --git a/backend/subject_routes.py b/backend/subject_routes.py\nindex 38d6d1d..32749be 100644\n--- a/backend/subject_routes.py\n+++ b/backend/subject_routes.py\n@@ -14,17 +14,19 @@ subject_routes = Blueprint(\'subject_routes\', __name__)\n @subject_routes.route(\'/get-all-subjects\', methods=[\'GET\'])\n @token_required\n def get_all_users(current_user):\n-    if current_user.role_id == 2:\n-        student = Student.query.filter_by(student_code=(current_user.student_code)).first()\n-        studentId = student.id\n-        subjects_of_student = Student_to_subject.query.filter_by(student_id=studentId).all()\n-        output = []\n-        for i in subjects_of_student:\n-            subject = Subject.query.filter_by(id=(i.subject_id)).first()\n-            output.append({\'id\':subject.id, \n-             \'name\':subject.name, \n-             \'teacher\':subject.teacher, \n-             \'status\':subject.status})\n+    # if current_user.role_id == 2:\n+\n+    student = Student.query.filter_by(student_code=(current_user.student_code)).first()\n+    studentId = student.id\n+    subjects_of_student = Student_to_subject.query.filter_by(student_id=studentId).all()\n+    output = []\n+    for i in subjects_of_student:\n+        subject = Subject.query.filter_by(id=(i.subject_id)).first()\n+        output.append({\'id\':subject.id, \n+            \'name\':subject.name, \n+            \'teacher\':subject.teacher, \n+            \'status\':subject.status})\n+    # return jsonify({\'subjects\': output})\n \n     if current_user.role_id == 3:\n         teacher = Teacher.query.filter_by(teacher_code=(current_user.teacher_code)).first()\n@@ -124,20 +126,20 @@ def add_url(current_user):\n         print(teacher.id)\n         permission_add_subject = Teacher_to_subject.query.filter_by(subject_id=id, teacher_id=(teacher.id)).first()\n         return subject and permission_add_subject or make_response(jsonify(\'no permission\'), 403)\n-        classes = Online_lesson(subject_id=id,\n-          lesson=(form[\'lesson\']),\n-          online_url=(form[\'onlineUrl\']),\n-          year=(form[\'year\']),\n-          month=(form[\'month\']),\n-          day=(form[\'day\']),\n-          hour_in=(form[\'hour_in\']),\n-          minute_in=(form[\'minute_in\']),\n-          hour_out=(form[\'hour_out\']),\n-          minute_out=(form[\'minute_out\']))\n-        db.session.add(classes)\n-        db.session.commit()\n-        return jsonify({\'url\': form[\'onlineUrl\']})\n-    return make_response(jsonify(\'no permission\'), 403)\n+    classes = Online_lesson(subject_id=id,\n+        lesson=(form[\'lesson\']),\n+        online_url=(form[\'onlineUrl\']),\n+        year=(form[\'year\']),\n+        month=(form[\'month\']),\n+        day=(form[\'day\']),\n+        hour_in=(form[\'hour_in\']),\n+        minute_in=(form[\'minute_in\']),\n+        hour_out=(form[\'hour_out\']),\n+        minute_out=(form[\'minute_out\']))\n+    db.session.add(classes)\n+    db.session.commit()\n+    return jsonify({\'url\': form[\'onlineUrl\']})\n+    # return make_response(jsonify(\'no permission\'), 403)\n \n \n @subject_routes.route(\'/subject-to-student\', methods=[\'POST\'])\ndiff --git a/backend/training_routes.py b/backend/training_routes.py\nindex f9d6342..6ad49e4 100644\n--- a/backend/training_routes.py\n+++ b/backend/training_routes.py\n@@ -1,9 +1,9 @@\n from flask import Blueprint\n from flask import redirect, jsonify, url_for, request, session, Response\n from .auth_routes import token_required\n-from Helper.camera import VideoCamera\n-from Helper.align_dataset_mtcnn import main\n-from Helper.classifier import main_train\n+from .Helper.camera import VideoCamera\n+from .Helper.align_dataset_mtcnn import main\n+from .Helper.classifier import main_train\n from . import app\n from flask_cors import CORS, cross_origin\n import os\n@@ -22,13 +22,15 @@ def regFaces():\n         margin = 32\n         random_order = \'random_order\'\n         gpu_memory_fraction = 0.25\n-        args = {\'input_dir\':input_dir, \n-         \'output_dir\':output_dir, \n-         \'image_size\':image_size, \n-         \'margin\':margin, \n-         \'random_order\':random_order, \n-         \'gpu_memory_fraction\':gpu_memory_fraction, \n-         \'detect_multiple_faces\':False}\n+        args = {\n+            \'input_dir\': input_dir, \n+            \'output_dir\': output_dir, \n+            \'image_size\': image_size, \n+            \'margin\': margin, \n+            \'random_order\':random_order, \n+            \'gpu_memory_fraction\': gpu_memory_fraction, \n+            \'detect_multiple_faces\': False\n+         }\n         print(args[\'output_dir\'])\n         main(args)\n         data = \'complete reg faces\''